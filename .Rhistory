tm_shape(chives) + tm_fill("trees_crown_den",
palette = "RdYlGn",
style = "quantile",
title = "Tree Coverage %")
tm_shape(chives) + tm_fill() +
tm_shape(fewTrees) + tm_fill(col = "brown")
tm_shape(chives) + tm_fill() +
tm_shape(fewTrees) + tm_fill(col = "AA4A44")
tm_shape(chives) + tm_fill() +
tm_shape(fewTrees) + tm_fill(col = AA4A44)
tm_shape(chives) + tm_fill() +
tm_shape(fewTrees) + tm_fill(col = "brown")
tm_shape(chives) + tm_fill() +
tm_shape(fewTrees) + tm_fill(col = "brown")
fewTreesSVI <- chives %>%
filter(trees_crown_den < 10 & svi_pecentile > 25)
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill(col = "brown")
fewTreesSVI <- chives %>%
filter(trees_crown_den < 10 & svi_pecentile < 25)
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill(col = "brown")
fewTreesSVI <- chives %>%
filter(trees_crown_den < 10 & svi_pecentile > 75)
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill(col = "brown")
fewTreesSVI <- chives %>%
filter(trees_crown_den < 10 & nn_q3_pm2_5 > 10)
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill(col = "brown")
fewTreesSVI <- chives %>%
filter(trees_crown_den < 10 & svi_pecentile > 75)
fewTreesSVI <- chives %>%
filter(trees_crown_den < 10 & svi_pecentile > 75)
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill(col = "brown")
fewTreesSVI <- chives %>%
filter(trees_crown_den < 10 & svi_pecentile > 50)
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill(col = "brown")
fewTrees <- chives %>%
filter(trees_crown_den < 10)
#head(fewTrees)
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill("svi_pecentile")
manyTrees <- chives %>%
subset(trees_crown_den < 50)
tm_shape(chives) + tm_fill() +
tm_shape(manyTrees) + tm_fill(col = "brown")
manyTrees <- chives %>%
subset(trees_crown_den > 50)
tm_shape(chives) + tm_fill() +
tm_shape(manyTrees) + tm_fill(col = "brown")
manyTrees <- chives %>%
subset(trees_crown_den >25)
tm_shape(chives) + tm_fill() +
tm_shape(manyTrees) + tm_fill(col = "brown")
manyTrees <- chives %>%
subset(trees_crown_den >25)
tm_shape(chives) + tm_fill() +
tm_shape(manyTrees) + tm_fill(svi_pecentile)
manyTrees <- chives %>%
subset(trees_crown_den >25)
tm_shape(chives) + tm_fill() +
tm_shape(manyTrees) + tm_fill("svi_pecentile")
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill("svi_pecentile")
tm_shape(chives) + tm_fill() +
tm_shape(fewTrees) + tm_fill("svi_pecentile")
fewTreesSVI <- chives %>%
subset(trees_crown_den < 10 & svi_pecentile > 60)
tm_shape(chives) + tm_fill() +
tm_shape(fewTreesSVI) + tm_fill(col = "brown")
mean(fewTreesSVI$svi_pecentile)
mean(fewTrees$svi_pecentile)
mean(chives$svi_pecentile)
mean(fewTrees$svi_pecentile)
mean(fewTreesSVI$svi_pecentile)
mean(chives$nn_q3_pm2_5)
mean(fewTrees$nn_q3_pm2_5)
mean(fewTreesSVI$nn_q3_pm2_5)
mean(chives$pct_white)
mean(fewTrees$pct_white)
mean(fewTreesSVI$pct_white)
mean(chives$pct_white, na.rm = TRUE)
mean(fewTrees$pct_white, na.rm = TRUE)
mean(fewTreesSVI$pct_white, na.rm = TRUE)
mean(chives$trees_crown_den)
mean(fewTrees$trees_crown_den)
mean(fewTreesSVI$trees_crown_den)
fewTreesSVI <- chives %>%
group_by("community") %>%
summarize(Trees = sum(trees_n))
chives %>%
group_by("community") %>%
summarize(Trees = sum(trees_n))
head(chives)
chives %>%
group_by(community) %>%
summarise(Trees = sum(trees_n))
comArea <- chives %>%
group_by(community) %>%
summarise(Trees = sum(trees_n))
tm_shape(comArea) + tm_fill(col = "Trees")
treeCom <- chives %>%
group_by(community) %>%
summarise(Trees = sum(trees_n))
tm_shape(treeCom) + tm_fill(col = "Trees")
dim(treeCom)
library(sf)
library(tidyverse)
library(tmap)
library(spData)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Code/eds-2022/assignment-1")
library(sf)
library(spData)
library(tidyverse)
library(tmap)
chives <- st_read("chives-data.geojson")
#head(chives)
dim(chives)
treeCom <- chives %>%
group_by(community) %>%
summarize(Trees = sum(trees_n),
TotTracts = n())
head(treeCom)
world2 = world %>%
st_drop_geometry() %>%
dplyr::select(lifeExp, continent) %>%
group_by(continent) %>%
mutate(MedianLifeExp = median(lifeExp, na.rm = FALSE))
world %>%
group_by(CONTINENT) %>%
summarise(med_life_ex = median(life_expectancy))
world%>%
group_by(continent) %>%
summarize(med_life_exp = median(lifeExp))
dplyr::select(life_expectancy, continent)
dplyr::select(life_expectancy, continent)
subset(us_states, us_states$REGION == "Midwest" & us_states$total_pop_15 > 10000000)
filter(world, median(lifeExp))
world %>%
group_by(continent) %>%
summarise_at(vars(lifeExp), list(name = median), na.rm = TRUE)
world2 = world %>%
st_drop_geometry() %>%
dplyr::select(lifeExp, continent) %>%
group_by(continent) %>%
mutate(MedianLifeExp = median(lifeExp, na.rm = FALSE))
world %>%
st_drop_geometry() %>%
dplyr::select(lifeExp, continent) %>%
group_by(continent) %>%
mutate(MedianLifeExp = median(lifeExp, na.rm = FALSE))
world %>%
st_drop_geometry %>%
dplyr::select (continent, lifeExp) %>%
group_by(continent)
world  %>%
group_by(continent)  %>%
summarize(pop = median(lifeExp, na.rm = TRUE))
world %>%
group_by(continent) %>%
summarize(median_life_exp = median(lifeExp))
world2 = world %>%
st_drop_geometry() %>%
dplyr::select(lifeExp, continent) %>%
group_by(continent) %>%
mutate(MedianLifeExp = median(lifeExp, na.rm = FALSE))
world %>%
st_drop_geometry() %>%
dplyr::select(lifeExp, continent) %>%
group_by(continent) %>%
mutate(MedianLifeExp = median(lifeExp, na.rm = FALSE))
world %>%
st_drop_geometry %>%
dplyr::select (continent, lifeExp) %>%
group_by(continent)
world  %>%
group_by(continent)  %>%
summarize(pop = median(lifeExp, na.rm = TRUE))
world  %>%
group_by(continent)  %>%
summarize(pop = median(lifeExp, na.rm = TRUE))
world %>%
st_drop_geometry %>%
dplyr::select (continent, lifeExp) %>%
group_by(continent)
world %>%
st_drop_geometry() %>%
dplyr::select(lifeExp, continent) %>%
group_by(continent) %>%
mutate(MedianLifeExp = median(lifeExp, na.rm = FALSE))
world  %>%
group_by(continent)  %>%
summarize(pop = median(lifeExp, na.rm = TRUE))
world %>%
st_drop_geometry %>%
dplyr::select (continent, lifeExp) %>%
group_by(continent)
world %>%
group_by(CONTINENT) %>%
summarise(med_life_ex = median(life_expectancy))
world%>%
group_by(continent) %>%
summarize(med_life_exp = median(lifeExp))
world %>%
group_by(continent) %>%
summarise_at(vars(lifeExp), list(name = median), na.rm = TRUE)
world%>%
group_by(continent) %>%
summarize(med_life_exp = median(lifeExp))
world2 = world %>%
st_drop_geometry() %>%
dplyr::select(lifeExp, continent) %>%
group_by(continent) %>%
mutate(MedianLifeExp = median(lifeExp, na.rm = FALSE))
world %>%
group_by(continent) %>%
summarize(median_life_exp = median(lifeExp))
world %>%
st_drop_geometry() %>%
dplyr::select(lifeExp, continent) %>%
group_by(continent) %>%
mutate(MedianLifeExp = median(lifeExp, na.rm = FALSE))
world  %>%
group_by(continent)  %>%
summarize(pop = median(lifeExp, na.rm = TRUE))
#Works
aggregate(x = world$lifeExp,
by = list(world$continent),
FUN = median,
na.rm = TRUE)
#Works
aggregate(lifeExp ~ continent,
FUN = median,
data = world,
na.rm = TRUE)
#Works
aggregate(world["lifeExp"],
list(world$continent),
FUN = median,
na.rm = TRUE)
world %>%
group_by(continent) %>%
summarize(medianLifeExp = median(lifeExp, na.rm = TRUE))
us_states %>%
filter(REGION == "Midwest", total_pop_15 > 10000000)
large_midwest_states = large_states$region == "Midwest"
us_states[us_states$REGION %in% c("Midwest"), ]
dplyr::select(world, lifeExp)
subset(us_states, REGION == "Midwest")
subset(us_states, REGION == "Midwest")
subset(midwest, as.numeric(total_pop_15) > 10000000)
us_states[us_states$REGION %in% c("Midwest"), ]
subset(us_states, us_states$REGION == "Midwest" & us_states$total_pop_15 > 10000000)
subset(us_states, us_states$REGION == "Midwest" & us_states$total_pop_15 > 10000000)
subset(midwest, as.numeric(total_pop_15) > 10000000)
large_states = us_states$population > 10000000
large_midwest_states = large_states$region == "Midwest"
large_states$region == "Midwest"
large_states$region == "Midwest"
subset(us_states, REGION == "Midwest")
us_states[us_states$REGION %in% c("Midwest"), ]
large_states = us_states$population > 10000000
large_states$region == "Midwest"
subset(midwest, as.numeric(total_pop_15) > 10000000)
us_states %>%
filter(REGION == "Midwest", total_pop_15 > 10000000)
subset(us_states, us_states$REGION == "Midwest" & us_states$total_pop_15 > 10000000)
world  %>%
group_by(continent)  %>%
summarize(pop = median(lifeExp, na.rm = TRUE))
world %>%
group_by(continent) %>%
summarise_at(vars(lifeExp), list(name = median), na.rm = TRUE)
world %>%
group_by(continent) %>%
summarize(medianLifeExp = median(lifeExp, na.rm = TRUE))
world %>%
st_drop_geometry %>%
dplyr::select (continent, lifeExp) %>%
group_by(continent)
aggregate(x = world$lifeExp,
by = list(world$continent),
FUN = median,
na.rm = TRUE)
aggregate(lifeExp ~ continent,
FUN = median,
data = world,
na.rm = TRUE)
aggregate(world["lifeExp"],
list(world$continent),
FUN = median,
na.rm = TRUE)
subset(us_states, REGION == "Midwest")
us_states[us_states$REGION %in% c("Midwest"), ]
subset(us_states, REGION == "Midwest")
subset(midwest, as.numeric(total_pop_15) > 10000000)
us_states %>%
filter(REGION == "Midwest", total_pop_15 > 10000000)
subset(us_states, us_states$REGION == "Midwest" & us_states$total_pop_15 > 10000000)
library(tmap)
tm_shape(Chi_tracts) + tm_borders(alpha=0.5)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(tmap)
grocerystores <- read.csv("data/GroceryStores.csv")
chiareas <- st_read("data/chicago_zips.shp")
COVID <- read.csv("data/COVID-19_Cases__Tests__and_Deaths_by_ZIP_Code.csv")
library(tidyverse)
COVID2 <- subset(COVID, Week.Number == 36)
realgrocery <- subset(grocerystores, SQUARE.FEET > 10000)
grocerystores = realgrocery
groceries <- st_as_sf(grocerystores,
coords = c("LONGITUDE", "LATITUDE"),
crs = 4326)
tm_shape(chiareas) + tm_polygons()+
tm_shape(groceries) + tm_dots()
groceries2<- st_transform(groceries, 3435)
chiareas2<- st_transform(chiareas, 3435)
tm_shape(chiareas2) + tm_polygons()+
tm_shape(groceries2) + tm_dots()
groc_Buffer<- st_buffer(groceries2, 2640) #half mile buffer
tm_shape(chiareas2) + tm_polygons()+
tm_shape(groc_Buffer) + tm_polygons(alpha=0.1)
chiareas2$grocTotal = lengths(st_intersects(chiareas2, groc_Buffer))
head(chiareas2)
tm_shape(chiareas2) + tm_polygons("grocTotal")
head(COVID)
COVID2 <- subset(COVID, Week.Number == 36)
head(COVID2)
COVIDf <- subset(COVID, c("ZIP.Code", "Case.Rate...Cumulative"))
COVIDf <- COVID[, c("ZIP.Code", "Case.Rate...Cumulative")]
head(COVIDf)
COVIDf$GEOID10 = COVIDf$ZIP.Code
head(COVIDf)
zipsMerged <- merge(chiareas2, COVIDf, by = "GEOID10")
head(zipsMerged)
zipsMerged <- merge(chiareas2, COVIDf, by.x = "GEOID10", by.y = "ZIP.Code")
head(zipsMerged)
tm_shape(chiareas2) +
tm_polygons("Case.Rate...Cumulative", style="quantile", pal="BuPu",
title = "COVID Case Rate")
tm_shape(grocTotal) +
tm_polygons("Case.Rate...Cumulative", style="quantile", pal="BuPu",
title = "COVID Case Rate")
tm_shape(chiareas2) +
tm_polygons("groctotal", style="quantile", pal="BuPu",
title = "COVID Case Rate")
tm_shape(chiareas2) +
tm_polygons("grocTotal", style="quantile", pal="BuPu",
title = "COVID Case Rate")
tm_shape(zipsMerged) +
tm_polygons("Case.Rate...Cumulative", style="quantile", pal="BuPu",
title = "COVID Case Rate")
tm_shape(zipsMerged) +
tm_polygons("Case.Rate...Cumulative", style="quantile", pal="BuPu",
title = "COVID Case Rate")
tm_shape(zipsMerged) +
tm_polygons("Case.Rate...Cumulative", style="quantile", pal="BuPu",
title = "COVID Case Rate") +
tm_shape(groc_Buffer) + tm_borders(col = "blue") +
tm_shape(groceries2) + tm_dots(col = "black", size = 0.2)
tm_shape(zipsMerged) +
tm_polygons("Case.Rate...Cumulative", style="quantile", pal="BuPu",
title = "COVID Case Rate") +
tm_shape(groc_Buffer) + tm_borders(col = "blue") +
tm_shape(groceries2) + tm_dots(col = "black", size = 0.1)
tm_shape(zipsMerged) +
tm_fill("Case.Rate...Cumulative", style="quantile", n=6, pal="-RdYlGn",
title = "COVID Case Rate",alpha = 0.8) +
tm_borders(lwd = 0) +
tm_shape(groc_Buffer) + tm_borders(col = "gray") + tm_fill(alpha=0.5) +
tm_shape(groceries2) + tm_dots(col = "black", size = 0.1) +
tm_layout(main.title = "Walkable Grocery Service Areas",
main.title.position = "center",
main.title.size = 1,
frame = FALSE)
tm_shape(zipsMerged) +
tm_fill("Case.Rate...Cumulative", style="quantile", n=6, pal="-RdYlGn",
title = "COVID Case Rate",alpha = 0.8) +
tm_borders(lwd = 0) +
tm_shape(groc_Buffer) + tm_borders(col = "gray") + tm_fill(alpha=0.5) +
tm_shape(groceries2) + tm_dots(col = "black", size = 0.1) +
tm_layout(main.title = "Walkable Grocery Service Areas",
main.title.position = "center",
main.title.size = 1,
frame = FALSE)
tm_shape(zipsMerged) +
tm_fill("Case.Rate...Cumulative", style="quantile", n=6, pal="-RdYlGn",
title = "COVID Case Rate",alpha = 0.8) +
tm_borders(lwd = 0) +
tm_shape(groc_Buffer) + tm_borders(col = "gray") + tm_fill(alpha=0.5) +
tm_shape(groceries2) + tm_dots(col = "black", size = 0.1) +
tm_layout(main.title = "Walkable Grocery Service Areas",
main.title.position = "center",
main.title.size = 1,
frame = FALSE, legend.outside = TRUE)
library(tidycensus)
library(tidyverse)
library(tigris)
Sys.getenv("CENSUS_API_KEY")
stateDf <- get_acs(geography = 'state', variables = c(totPop18 = "B01001_001",
hispanic ="B03003_003",
notHispanic = "B03003_002",
white = "B02001_002",
afrAm = "B02001_003",
asian = "B02001_005"),
year = 2018, geometry = FALSE)
head(stateDf)
stateDf <- stateDf %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(hispPr18  = hispanic/totPop18, whitePr18 = white/totPop18,
afrAmPr18 = afrAm/totPop18, asianPr18 = asian/totPop18) %>%
select(GEOID,totPop18,hispPr18,whitePr18,afrAmPr18, asianPr18)
head(stateDf)
tractDf <- get_acs(geography = 'tract',variables = c(totPop18 = "B01001_001",
hispanic ="B03003_003",
notHispanic = "B03003_002",
white = "B02001_002",
afrAm = "B02001_003",
asian = "B02001_005"),
year = 2018, state = 'IL', geometry = FALSE) %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(hispPr18  = hispanic/totPop18, whitePr18 = white/totPop18,
afrAmPr18 = afrAm/totPop18, asianPr18 = asian/totPop18) %>%
select(GEOID,totPop18,hispPr18,whitePr18,afrAmPr18, asianPr18)
head(tractDf)
zctaDf <- get_acs(geography = 'zcta',variables = c(totPop18 = "B01001_001",
hispanic ="B03003_003",
notHispanic = "B03003_002",
white = "B02001_002",
afrAm = "B02001_003",
asian = "B02001_005"),
year = 2018, geometry = FALSE) %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(hispPr18  = hispanic/totPop18, whitePr18 = white/totPop18,
afrAmPr18 = afrAm/totPop18, asianPr18 = asian/totPop18) %>%
select(GEOID,totPop18,hispPr18,whitePr18,afrAmPr18, asianPr18)
head(zctaDf)
zipChicagoDf <- get_acs(geography = 'zcta', variables = c(perCapInc = "DP03_0088"),year = 2018, geometry = FALSE) %>%
select(GEOID, NAME, variable, estimate) %>%
filter(str_detect( GEOID,"^606")) %>%  ## add a str filter
spread(variable, estimate) %>%
select(GEOID, perCapInc)
zipChicagoDf
zipsMergedf <- merge(zipsMergedf, zipChicagoDf, by.x="GEOID10", by.y="GEOID")
zipsMergedf <- merge(zipsMerged, zipChicagoDf, by.x="GEOID10", by.y="GEOID")
head(zipsMergedf)
head(zctaDf)
zipsMergedf <- merge(zipsMerged, zctaDf, by.x="GEOID10", by.y="GEOID")
head(zipsMergedf)
zipsMergedf <- merge(zipsMergedf, zctaDf, by.x="GEOID10", by.y="GEOID")
head(zipsMergedf)
zipsMergedf <- merge(zipsMerged, zipChicagoDf, by.x="GEOID10", by.y="GEOID")
zipsMerged2 <- merge(zipsMergedf, zctaDf, by.x="GEOID10", by.y="GEOID")
head(zipsMerged2)
# density = population / area
zipsMergedf$AREA = st_area(zipsMergedf)
head(zipsMergedf)
# density = population / area
zipsMerged2$AREA = st_area(zipsMerged2)
head(zipsMerged2)
zipsMerged2$ResArea = zipsMerged2$totPop18 / zipsMerged2$AREA
tm_shape(zipsMerged2) + tm_polygons("ResArea")
install.packages("spatialepi")
install.packages("SpatialEpi")
library(SpatialEpi)
install.packages("coda")
library(SpatialEpi)
library("LearnBayes")
install.packages("LearnBayes")
library(SpatialEpi)
install.packages("gmodels")
library(SpatialEpi)
install.packages("expm")
library(SpatialEpi)
data(pennLC)
pennLC$data$population
head(pennLC)
population <- pennLC$data$population
cases <- pennLC$data$cases
pennLC$data[1:16,]
expected(population, cases, 16)
exp <- expected(population, cases, 16)
head(exp)
2+2
setwd("~/Code/sdhoplace-toolkit")
install.packages("bookdown")
bookdown::render_book('index.Rmd', 'bookdown::gitbook')"
)
d
)
bookdown::render_book('index.Rmd', 'bookdown::gitbook')"
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')"
out.width="50%
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
